/********************************************************************
created:	pinorr
file base:	AlgorithmDDZ.h
author:		pinorr	Q 505971450
purpose:	斗地主算法
*********************************************************************/

#ifndef __ALGORITHM_DDZ_H__
#define __ALGORITHM_DDZ_H__
#include <set>
#include <string>
#include <vector>
#include <windows.h>
#include <iostream>
#include <unordered_map>  
#include <stdio.h>

using namespace std;

#define MAX_INDEX						15
#define BIT_VAL_NUM						2					//一个值占的bit数
#define BIT_VAL_FLAG					0x03				//
#define MAX_COUNT						20
#define INVALID_VAL						0xFF
#define STR_SAVE_PATH					"D:\\dataDDZ.pino"

enum enVal
{
	enVal_3,
	enVal_4,
	enVal_5,
	enVal_6,
	enVal_7,
	enVal_8,
	enVal_9,
	enVal_10,
	enVal_J,
	enVal_Q,
	enVal_K,
	enVal_A,
	enVal_2,
	enVal_s,
	enVal_S,
	enVal_max,
};
enum enType
{
	enType_1,
	enType_2,
	enType_3,
	enType_4,
	enType_max,
};

static BYTE s_DelNum[enType_max] = { 0, 0, 1, 2 };
static BYTE s_TypeNum[enType_max] = { 1, 2, 3, 4 };

struct stComb;
struct stData;
struct stDataScore
{
	BYTE		byScore;
	BYTE		byCombID[6];

	stDataScore(){	memset(this, 0xFF, sizeof(*this));	}
};
DWORD getVal(BYTE type, BYTE begin, BYTE lineNum);

vector<stComb>					g_vctCombInfo;						//各组合牌：156种
unordered_map<DWORD, BYTE>		g_mapCombInfo[enType_max];			//
stDataScore						g_arrayAll[16777216];				//2^24

struct stComb
{
	BYTE		byType;		//enType
	BYTE		byBegin;	//起始牌值 enVal
	BYTE		byLineNum;	//连续牌数量
	BYTE		byDelNum;	//可带单牌数

	stComb() { memset(this, 0, sizeof(*this)); }
	stComb(BYTE type, BYTE begin, BYTE lineNum)
	{		
		if (type < enType_max && lineNum > 0)
		{
			byType = type;
			byBegin = begin;
			byLineNum = lineNum;
			byDelNum = s_DelNum[byType] * byLineNum;
		}		
	}	
};

struct stData
{
	BYTE		byCombNum;
	BYTE		byCombID[6];
	BYTE		byLeftNum;
	BYTE		byLeft[MAX_INDEX];

	stData(){ memset(this, 0, sizeof(*this)); }
	stData(const stData &temp){ memcpy(this, &temp, sizeof(stData)); }

	bool addComb(BYTE type, BYTE begin, BYTE lineNum)
	{
		if (type < enType_max && byCombNum < 6)
		{
			DWORD llVal = getVal(type, begin, lineNum);
			auto iter = g_mapCombInfo[type].find(llVal);
			if (iter != g_mapCombInfo[type].end())
			{
				byCombID[byCombNum++] = iter->second;
				for (int i = begin; i < min(MAX_INDEX, begin + lineNum); ++i)
				{
					if (byLeft[i] >= s_TypeNum[type])
					{
						byLeft[i] -= s_TypeNum[type];
						byLeftNum -= s_TypeNum[type];
					}						
				}
				return true;
			}
		}
		return false;
	}
	void addLeft(BYTE index, BYTE byNum)
	{
		if (index < MAX_INDEX)
		{
			byLeft[index] += byNum;
			byLeftNum += byNum;
		}
	}
	stData operator + (stData temp) const
	{
		stData ret(*this);
		BYTE byAdd = min(temp.byCombNum, 6 - ret.byCombNum);
		if (byAdd > 0)
		{
			memcpy(ret.byCombID + byCombNum, temp.byCombID, byAdd);
			ret.byCombNum += byAdd;
		}	
		ret.byLeftNum = 0;
		for (int i = 0; i < MAX_INDEX; ++i)
		{
			ret.byLeft[i] += temp.byLeft[i];
			ret.byLeftNum += ret.byLeft[i];
		}
		return ret;
	}
	stDataScore getScoreInfo()
	{
		stDataScore stScore;
		memcpy(stScore.byCombID, byCombID, byCombNum);
		int leftNum1 = 0, leftNum2 = 0;
		for (int i = 0; i < MAX_INDEX; ++i)
		{
			if (byLeft[i] == 1)
				++leftNum1;
			else if (byLeft[i] == 2)
				++leftNum2;
		}

		int delNum = 0;
		for (int i = 0; i < byCombNum; ++i)
		{
			delNum = g_vctCombInfo[byCombID[i]].byDelNum;
			if (delNum > 0)
			{
				if (leftNum1 >= delNum)
					leftNum1 -= delNum;
				else if (leftNum2 >= delNum)
					leftNum2 -= delNum;
				else if (leftNum1 + leftNum2*2 >= delNum)
				{
					delNum -= leftNum1;
					leftNum2 -= (delNum + 1) / 2;
					leftNum1 = delNum % 2;
				}
			}
		}
		stScore.byScore = byCombNum + leftNum1 + leftNum2;
		return stScore;
	}
};

struct stDataSingle
{
	stData		sData;
	DWORD		llVal;

	stDataSingle(){ memset(this, 0, sizeof(*this)); }
};

inline DWORD	getVal(BYTE type, BYTE begin, BYTE lineNum)
{
	DWORD llTemp = 0;
	for (int i = begin; i < begin + lineNum; ++i)
		llTemp |= (DWORD)(s_TypeNum[type] & BIT_VAL_FLAG) << (BIT_VAL_NUM*i);

	return llTemp;
}
inline DWORD	getVal(stComb stTemp)
{
	DWORD llTemp = 0;
	for (int i = stTemp.byBegin; i < stTemp.byBegin + stTemp.byLineNum; ++i)
		llTemp |= (DWORD)(s_TypeNum[stTemp.byType] & BIT_VAL_FLAG) << (BIT_VAL_NUM*i);

	return llTemp;
}
inline DWORD	getValByFlag(BYTE type, int flag)
{
	DWORD llTemp = 0;
	for (int i = 0; i < MAX_INDEX; ++i)
	{
		if (flag & (1<<i))
		{
			llTemp |= (DWORD(s_TypeNum[type])) << (2*i);
		}		
	}
	return llTemp;
}
inline bool		isContain(DWORD llSrc, DWORD llVal)
{
	while (llVal > 0)
	{
		BYTE bySrc = (llSrc >> BIT_VAL_NUM) & BIT_VAL_FLAG;
		BYTE byVal = (llVal >> BIT_VAL_NUM) & BIT_VAL_FLAG;
		if (bySrc < byVal)	return false;

		llSrc = llSrc >> BIT_VAL_NUM;
		llVal = llVal >> BIT_VAL_NUM;
	}
	return true;
}
inline DWORD	getKeyByIndex(BYTE byIndex[MAX_INDEX], BYTE byNum = MAX_INDEX)
{
	DWORD llKey = 0;
	for (int i = 0; i < byNum; ++i)
		llKey |= (DWORD)(byIndex[i] & BIT_VAL_FLAG) << (BIT_VAL_NUM*i);
	return llKey;
}
inline bool		isValidKey(DWORD llVal)
{
	BYTE byIndex[MAX_INDEX] = {};
	for (int i = 0; i < MAX_INDEX; ++i)
		byIndex[i] = (llVal >> (BIT_VAL_NUM*i))&BIT_VAL_FLAG;

	int nNum = 0;
	for (int i = 0; i < MAX_INDEX; ++i)
	{
		nNum += byIndex[i];
		BYTE byMaxNum = i < enVal_s ? 4 : 1;
		if (byIndex[i] > byMaxNum || nNum > MAX_COUNT)	//
			return false;
	}
	return nNum > 0;
}
inline BYTE		getNumByKey(DWORD llVal, BYTE byNum = MAX_INDEX)
{
	BYTE byIndex[MAX_INDEX] = {};
	for (int i = 0; i < MAX_INDEX; ++i)
		byIndex[i] = (llVal >> (BIT_VAL_NUM*i))&BIT_VAL_FLAG;

	BYTE nNum = 0;
	for (int i = 0; i < byNum; ++i)
		nNum += byIndex[i];
	return nNum;
}
inline int		getBitByFlag(int flag)
{
	int num = 0;
	while (flag > 0)
	{
		flag &= (flag - 1);
		++num;
	}
	return num;
}

class CCalcDDZ
{
private:
	// 获取所有三张以上的有效组合（除了单牌、单对）双王除外
	static void TrainSingle1()
	{
		g_vctCombInfo.clear();
		// enType_1
		for (int i = enVal_3; i <= enVal_A; ++i)
		{
			// 连牌 5组以上
			for (int j = i + 5 - 1; j <= enVal_A; ++j)
			{
				stComb stTemp(enType_1, i, (j - i + 1));
				g_mapCombInfo[enType_1][getVal(stTemp)] = g_vctCombInfo.size();
				g_vctCombInfo.push_back(stTemp);
			}
		}		
		// enType_2
		for (int i = enVal_3; i <= enVal_A; ++i)
		{
			// 连对 3组以上
			for (int j = i + 3 - 1; j <= enVal_A; ++j)
			{
				if ((j - i + 1) * 2 <= MAX_COUNT)
				{
					stComb stTemp(enType_2, i, (j - i + 1));
					g_mapCombInfo[enType_2][getVal(stTemp)] = g_vctCombInfo.size();
					g_vctCombInfo.push_back(stTemp);
				}
			}
		}		
		// enType_3
		for (int i = enVal_3; i <= enVal_A; ++i)
		{
			// 三顺、三张 1组以上
			for (int j = i; j <= enVal_A; ++j)
			{
				if ((j - i + 1) * 3 <= MAX_COUNT)
				{
					stComb stTemp(enType_3, i, (j - i + 1));
					g_mapCombInfo[enType_3][getVal(stTemp)] = g_vctCombInfo.size();
					g_vctCombInfo.push_back(stTemp);
				}
			}
		}		
		stComb stTemp1(enType_3, enVal_2, 1);
		g_mapCombInfo[enType_3][getVal(stTemp1)] = g_vctCombInfo.size();
		g_vctCombInfo.push_back(stTemp1);

		// enType_4:四张
		for (int i = enVal_3; i <= enVal_2; ++i)
		{
			stComb stTemp(enType_4, i, 1);
			g_mapCombInfo[enType_4][getVal(stTemp)] = g_vctCombInfo.size();
			g_vctCombInfo.push_back(stTemp);
		}

		// 
		stComb stTemp(enType_1, enVal_s, 2);
		g_mapCombInfo[enType_1][getVal(stTemp)] = g_vctCombInfo.size();
		g_vctCombInfo.push_back(stTemp);

		cout << g_vctCombInfo.size() << endl;
	};

	// 获取单类型所有组合
	static void TrainSingle2()
	{
		// enType_1 -> 0 ~ 2^15-1 (0 ~ 32767)
		int nVal_sS = 24576; // 2^enVal_s + 2^enVal_S
		static stDataSingle stType1[4096];		//32768
		for (int n = 0; n < 4096; ++n)			//32768
		{			
			stData stTemp;
			int nBegin = -1;
			for (int i = enVal_3; i < enVal_2; ++i)
			{
				if (n & (1 << i)) stTemp.addLeft(i, 1);
				if (i > enVal_A) continue;
				if (stTemp.byLeft[i] == 0 || i == enVal_A)
				{
					int nDis = i - nBegin;
					if (stTemp.byLeft[i] != 0) ++nDis;
					if (nBegin >= 0 && nDis >= 5)
						stTemp.addComb(enType_1, nBegin, nDis);

					nBegin = -1;
				}
				else if (nBegin < 0)
					nBegin = i;
			}			
			if ((n & nVal_sS) == nVal_sS)
				stTemp.addComb(enType_1, enVal_s, 2);

			stType1[n].sData = stTemp;
			stType1[n].llVal = getValByFlag(enType_1, n);
		}
		// enType_2 -> 0 ~ 2^13-1 (0 ~ 8191)
		static stDataSingle stType2[4096];		//8192
		for (int n = 0; n < 4096; ++n)
		{
			stData stTemp;
			if (getBitByFlag(n)*2 > MAX_COUNT) continue;
			int nBegin = -1;
			for (int i = enVal_3; i < enVal_2; ++i)
			{
				if (n & (1 << i)) stTemp.addLeft(i, 2);
				if (i > enVal_A) continue;
				if (stTemp.byLeft[i] == 0 || i == enVal_A)
				{
					int nDis = i - nBegin;
					if (stTemp.byLeft[i] != 0) ++nDis;
					if (nBegin >= 0 && nDis >= 3)
						stTemp.addComb(enType_2, nBegin, nDis);

					nBegin = -1;
				}
				else if (nBegin < 0)
					nBegin = i;
			}
			stType2[n].sData = stTemp;
			stType2[n].llVal = getValByFlag(enType_2, n);
		}
		// enType_3 -> 0 ~ 2^13-1 (0 ~ 8191)
		static stDataSingle stType3[4096];		//8192
		for (int n = 0; n < 4096; ++n)
		{
			stData stTemp;
			if (getBitByFlag(n) * 3 > MAX_COUNT) continue;
			int nBegin = -1;
			for (int i = enVal_3; i < enVal_2; ++i)
			{
				if (n & (1 << i)) stTemp.addLeft(i, 3);
				if (i > enVal_A)
				{
					stTemp.addComb(enType_3, i, 1);
					continue;
				}
				if (stTemp.byLeft[i] == 0 || i == enVal_A)
				{
					int nDis = i - nBegin;
					if (stTemp.byLeft[i] != 0) ++nDis;
					if (nBegin >= 0 && nDis >= 2)
						stTemp.addComb(enType_3, nBegin, nDis);

					nBegin = -1;
				}
				else if (nBegin < 0)
					nBegin = i;
			}
			for (int i = enVal_3; i < enVal_2; ++i)
			{
				if (stTemp.byLeft[i])
					stTemp.addComb(enType_3, i, 1);
			}
			if (stTemp.byLeftNum != 0)
			{
				memset(stTemp.byLeft, 0, MAX_INDEX);
			}	
			stType3[n].sData = stTemp;
			stType3[n].llVal = getValByFlag(enType_3, n);
		}

		// enType_4 -> 0 ~ 2^13-1 (0 ~ 8191)
// 		static stDataSingle stType4[4096];		//8192
// 		for (int n = 0; n < 4096; ++n)
// 		{
// 			stData stTemp;
// 			if (getBitByVal(n) * 4 > MAX_COUNT) continue;
// 			int nBegin = -1;
// 			for (int i = enVal_3; i < enVal_2; ++i)
// 			{
// 				if ((n & (1 << i)))
// 					stTemp.addComb(enType_4, i, 1);
// 			}
// 			stType4[n].sData = stTemp;
// 			stType4[n].llVal = getValByFlag(enType_4, n);
// 		}

		//////////////////////////////////////////////////////////////////////
		// 生成所有有效组合
		stDataScore stTemp;
		for (int i1 = 0; i1 < 4096; ++i1)
		{
			int num1 = getBitByFlag(i1);
			DWORD llKey1 = stType1[i1].llVal;	
			stTemp = stType1[i1].sData.getScoreInfo();
			if (stTemp.byScore < g_arrayAll[llKey1].byScore)
				g_arrayAll[llKey1] = stTemp;
			
			for (int i2 = 0; i2 < 4096; ++i2)
			{				
				if (num1 + getBitByFlag(i2) * 2 > MAX_COUNT)
				//if ((i1 & i2) != 0 || num1 + getBitByFlag(i2) * 2 > MAX_COUNT)
					continue;
				int num2 = num1 + getBitByFlag(i2) * 2;
				DWORD llKey2 = llKey1 + stType2[i2].llVal;
				stTemp = (stType1[i1].sData + stType2[i2].sData).getScoreInfo();

// 				if (llKey2 == 87893)
// 				{
// 					cout << "2\t" << llKey1 << '\t' << stType2[i2].llVal << endl;
// 					cout << "2\t" << (int)stTemp.byScore << '\t' << (int)g_arrayAll[llKey2].byScore << endl;
// 				}

				if (stTemp.byScore < g_arrayAll[llKey2].byScore)
					g_arrayAll[llKey2] = stTemp;				

				for (int i3 = 0; i3 < 4096; ++i3)
				{					
					if (((i1 | i2) & i3) != 0 || num2 + getBitByFlag(i3) * 3 > MAX_COUNT)
						continue;
					int num3 = num2 + getBitByFlag(i3) * 3;
					DWORD llKey3 = llKey2 + stType3[i3].llVal;
					stTemp = (stType1[i1].sData + stType2[i2].sData + stType3[i3].sData).getScoreInfo();

// 					if (llKey3 == 87893)
// 					{
// 						cout << "3\t" << llKey2 << '\t' << stType3[i3].llVal << endl;
// 						cout << "3\t" << (int)stTemp.byScore << '\t' << (int)g_arrayAll[llKey3].byScore << endl;
// 					}

					if (stTemp.byScore < g_arrayAll[llKey3].byScore)
						g_arrayAll[llKey3] = stTemp;
// 					for (int i4 = 0; i4 < 8192; ++i4)
// 					{						
// 						if (((i1 | i2 | i3) & i4) == 0 && num3 + getBitByVal(i4) * 4 <= MAX_COUNT)
// 						{
// 							int num4 = num3 + getBitByVal(i4) * 4;
// 							DWORD llKey4 = llKey3 + stType4[i4].llVal;
// 							++sum;
// 						}
// 					}
				}
			}
		}
	}

	// 
	static void SaveTrainData()
	{
		if (g_vctCombInfo.size() == 0)
		{
			TrainSingle1();
			TrainSingle2();
		}
		FILE * pf = fopen(STR_SAVE_PATH, "wb");
		if (pf)
		{			
			BYTE byNum = g_vctCombInfo.size();
			fwrite(&byNum, 1, sizeof(BYTE), pf);
			fwrite(&g_vctCombInfo[0], 1, byNum*sizeof(stComb), pf);
			for (int i = 0; i < 16777216; i += 1024)
			{
				fwrite(&g_arrayAll[i], 1, 1024 * sizeof(stDataScore), pf);
			}
			fclose(pf);
		}
	}
	static void ReadTrainData()
	{
		FILE * pf = fopen(STR_SAVE_PATH, "rb");
		if (pf)
		{
			DWORD dwTickFlag = GetTickCount();
			// 1.读取表
			BYTE byNum = 0;
			int nRead = (int)fread(&byNum, 1, sizeof(BYTE), pf);
			if (nRead != sizeof(BYTE)) return;
			g_vctCombInfo.resize(byNum);
			nRead = (int)fread(&g_vctCombInfo[0], 1, byNum * sizeof(stComb), pf);
			if (nRead != byNum * sizeof(stComb)) return;

			// 2.读取内容
			int nSave = 0;
			int nFileSize = 1024 * sizeof(stDataScore);
			while (nFileSize > 0 && nFileSize % sizeof(stDataScore) == 0)
			{
				nFileSize = (int)fread(&g_arrayAll[nSave], 1, 1024 * sizeof(stDataScore), pf);
				nSave += nFileSize / sizeof(stDataScore);
			}
			fclose(pf);
			cout << "nSave:" << nSave << endl;
			cout << "cost:" << GetTickCount() - dwTickFlag << "ms" << endl;
		}
		else
			SaveTrainData();
	}

	static void TrainAllComb(const set<int> &setSingle, unordered_map<int, BYTE> mapOut[])
	{
	}	

public:
	static void TrainAll()
	{
		//SaveTrainData();
		ReadTrainData();
// 		if (g_setSingle.empty())
// 		{
// 			DWORD dwFlag = GetTickCount();
// 			TrainSingle();
// 			TrainAllComb(g_setSingle, g_mapHuAll);
// 			TrainAllComb(g_setSingleFZ, g_mapHuAllFZ);
// 			cout << "train cost:" << GetTickCount()-dwFlag << "ms" << endl;
// 		}	
// 		else
// 			cout << "already trained!" << endl;
	}

	static void testOutCard(BYTE byCard[MAX_INDEX])
	{
		DWORD dwVal = getKeyByIndex(byCard, enVal_2);
		for (int i = 0; i < 6; ++i)
		{
			if (g_arrayAll[dwVal].byCombID[i] == 0xFF) break;
			stComb &stTemp = g_vctCombInfo[g_arrayAll[dwVal].byCombID[i]];
			for (BYTE n = stTemp.byBegin; n < stTemp.byBegin + stTemp.byLineNum; ++n)
			{
				for (int t = 0; t < s_TypeNum[stTemp.byType]; ++t)
				{
					cout << (int)(n + 3) << " ";
				}
			}
			cout << endl;
		}
	}
};

#endif //__ALGORITHM_DDZ_H__
